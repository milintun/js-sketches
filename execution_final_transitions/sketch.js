let data;
let sorted_age;
let font;
let italic;

let W;
let H;

let flipCard;
let randIndex; let randFront;
let row; let fullName;
let homeButtonPos;
let homeButtonHover;
let backButtonPos;
let backButtonHover;
let backPage;
let currentPage;
let cardButtonPos;

let seenCardDisplays;
let preloadedCards;
let cardHover;
let prevMillis;
let expanding;
let timelineButtonPos;
let timelineButtonHover;
let ageButtonPos;
let ageButtonHover;
let keywordButtonPos;
let keywordButtonHover;

let d = new SoftNum(1, 0.03, 1.2);
let blinkMillis;
let blink = new SoftNum(0);
let blinkOn;

let beginOpac;
let yearCount;

let randomXs = [];
let randomYs = [];

let arcSofts;
let ageHoveredIndex;
const keywords = [['god', 'lord', 'heaven', 'kingdom', 'pray', 'jesus', 'christ'], 
                  ['innocent', 'innocence'],
                  ['regret', 'remorse'],
                  ['sorry', 'apologize'], 
                  ['love'],
                  ['sister', 'brother', 'family', 'father', 'mother', 'dad', 'mom', 'son', 'daughter']];
                  
const keywordsDisplay = [['God, Lord, heaven, kingdom, pray, Jesus, Christ'], 
                  ['innocent'],
                  ['regret, remorse'],
                  ['sorry, apologize'], 
                  ['love'],
                  ['family, sister, brother, father, mother, dad, mom, son, daughter']];
           

let scrollOffset;
let visitedCardIndices;
let pageStack;
let width; let height;

function load() {
  data = loadTable("final_data_with_timeline.csv", "header", "names");
  sorted_age = loadTable("sorted_age.csv", "header", "names");
  font = loadFont("CrimsonText-Regular.ttf");
  italic = loadFont("CrimsonText-Italic.ttf");
}

function setup() {

  width = window.innerWidth;
  height = window.innerHeight;  
  size(width, height);
  textAlign(CENTER);
  rectMode(CORNER);
  W = width / 2;
  H = height / 2;
  textSize(20);
  stroke("white");
  strokeWeight(1);
  flipCard = false;
  
  homeButtonPos = {x: 90, y: 32};
  backButtonPos = {x: 200, y: 32};
  backButtonHover = false;
  backPage = homePage;
  prevMillis = -3;
  expanding = true;
  timelineButtonPos = {x: 1180, y: 17, w: 100, h: 100};
  timelineButtonHover = false;
  ageButtonPos = {x: 1330, y: 17, w: 100, h: 100};
  ageButtonHover = false;
  keywordButtonPos = {x: 1480, y: 17, w: 100, h: 100};
  keywordButtonHover = false;
  
  cardButtonPos = {x: W, y: H};
  seenCardDisplays = [];
  preloadedCards = [];
  preloadCards();
  cardHover = {index: undefined, x: undefined, y: undefined, w: undefined, h: undefined};
  
  randomXs = Array(600).fill(0);
  randomYs = Array(600).fill(0);

  const arcVals = [0, 188, 431, 546, 587, 593];
  arcSofts = arcVals.map((val) => new SoftNum(remap(val, 0, 593, 0, 2 * Math.PI) - Math.PI / 2, 0.1, 0.9));
  
  beginOpac = 1;
  scrollOffset = 0;
  visitedCardIndices = [];
  pageStack = ['home'];
  
  blinkOn = true;
  blinkMillis = 0;
}

function draw() {
  clear(gray(90));
  backButtonHover = false;
  homeButtonHover = false;
  textFont(font);
  currentPage = pageStack[pageStack.length - 1];
  
  // draw navbar
  navBar();
  
  // update blink value for various animations
  blink.update()
  if (elapsed() - blinkMillis > 1) {
      if (blinkOn) {
        blink.setTarget(0); // grow
      } else {
        blink.setTarget(80); // shrink
      }
      blinkOn = !blinkOn;
      blinkMillis = elapsed();
  }
  
  // switch between pages
  if (currentPage === 'home') {
    homePage();
  } else if (currentPage === 'card') {
    cardPage(randIndex, randFront);
  } else if (currentPage === 'timeline') {
    timelinePage();
  } else if (currentPage === 'age') {
    agePage();
  } else if (currentPage === 'keyword') {
    keywordPage();
  } else if (currentPage === 'cardWithKeywords') {
    cardPage(randIndex, randFront, true);
  }
}

/**
 * Draw interactive top navbar.
 */
function navBar() {
    push()
    fill(gray(10));
    rect(0, 0, width, 50);
    pop()
    push()
    fill(gray(50))
    
    // navbar buttons
    text('TIMELINE', timelineButtonPos.x + 15, timelineButtonPos.y + 15);
    text('AGE', ageButtonPos.x + 15, ageButtonPos.y + 15);
    text('KEYWORD', keywordButtonPos.x + 15, keywordButtonPos.y + 15);
    if (currentPage !== 'home') {
         drawNavButtons();
    }
    push()
    
    timelineButtonHover = false;
    ageButtonHover = false;
    keywordButtonHover = false;
    fill(gray(100))
    if (mouseIn(0, 0, 1600, 50)) {
        cardHover = {index: undefined, x: undefined, y: undefined, w: undefined, h: undefined};
         if (mouseIn(timelineButtonPos.x - 30, timelineButtonPos.y - 25, 100, 50)) {
             timelineButtonHover = true;
             text('TIMELINE', timelineButtonPos.x + 15, timelineButtonPos.y + 15);
         } else if (mouseIn(ageButtonPos.x - 10, ageButtonPos.y - 25, 50, 50)) {
             text('AGE', ageButtonPos.x + 15, ageButtonPos.y + 15);
             ageButtonHover = true;
         } else if (mouseIn(keywordButtonPos.x - 30, keywordButtonPos.y - 25, 100, 50)) {
             text('KEYWORD', keywordButtonPos.x + 15, keywordButtonPos.y + 15);
             keywordButtonHover = true;
         }
    }
    pop()
    pop()
}

let timelineHover;
let timelineIndex;
/**
 * Draw interactive timeline page.
 */
function timelinePage() {
    push()
    fill('black')
    text('TIMELINE', timelineButtonPos.x + 15, timelineButtonPos.y + 15);
    pop()
    push()
    rectMode(CENTER);
    let xHover;
    let execNumber = 1;
    let x = 33; let xGap = 34;
    let yBottom = 850; 
    let index = 0;
    timelineHover = false;
    let staticPoint = {x: undefined, y: undefined};
    
    // draw timeline years and boxes
    for (let execYear = 1982; execYear <= 2025; execYear ++) {
        x += xGap
        if (mouseX > x - 15 && mouseX < x + 15) {xHover = true} else {xHover = false}
        textSize(12);
        fill(gray(80))
        const rows = data.findRows(execYear, "Year");
        const execs = rows.length
        const maxHeight = remap(rows.length, 0, 40, 800, 200)
        push()
        if (xHover) { // if hover over year
            fill(gray(50));
        }
        let y = yBottom; let yGap = -17;
        let yHover = false;  
        let hoverPoint = {x: undefined, y: undefined};
        for (let exec = 1; exec <= execs; exec++) {
          // CARD EXPLORE
            index += 1;
            y += yGap;
            if (mouseY < y + 8.5 && mouseY > y - 8.5) {yHover = true} else {yHover = false}
            push()
            if (cardExplore && index === cardExploreIndex) {
                const row = rows[exec - 1];
                const fullName = `${row['First Name']} ${row['Last Name']}`;
                const date = row['Date of Execution'];
                fill('white');
                textSize(20);
                textAlign(LEFT);
                text(`${fullName} was executed on ${formatDate(date)}.\n${750 + index} others have been executed in the state of Texas.`, 1000, 200);
                staticPoint = {x: x, y: y};
                fill(gray(blink.value))
            } else if (xHover && yHover) {
                timelineHover = true;
                timelineIndex = index;
                const row = rows[exec - 1];
                const fullName = `${row['First Name']} ${row['Last Name']}`;
                const date = row['Date of Execution'];
                fill('white');
                textSize(20);
                textAlign(LEFT);
                text(`${fullName} was executed on ${formatDate(date)}.\n${750 + index} others have been executed in the state of Texas.`, 40, 125);
                hoverPoint = {x: x, y: y};
            }  
            strokeWeight(0.3);
            rect(x, y, 30, 15);
            pop()
        }
        pop()
        fill('white')
        if (xHover) { // add year count on top of hovered year
            if (rows.length) {
                textSize(15)
                text(rows.length, x, y - 15)
            }
            if (hoverPoint.x !== undefined) { // draw connecting line over every box
                strokeWeight(0.5)
                line(hoverPoint.x, hoverPoint.y, 170, 170);
            }
        }
        text(execYear, x, yBottom + 15);
    }
    if (staticPoint.x !== undefined) { // draw connecting line over every box
            strokeWeight(0.5)
            line(staticPoint.x, staticPoint.y, 1200, 240);
    }
    pop();
    rectMode(CORNER);
    return 'timeline'
}

const arcVals = [0, 188, 431, 546, 587, 593];
let ageHover;
let ageStaticPoint;
let ageStaticStatement;
/**
 * Draw interactive age page.
 */
function agePage() {
    push()
    fill('black')
    text('AGE', ageButtonPos.x + 15, ageButtonPos.y + 15);
    pop()
    const ringAll = drawTreeRing(24, 70);
    const threshs = [24, 35, 45, 55, 65];
    const regGrays = [70, 20, 80, 30, 60];
    const hoveredColors = [[114, 102, 90], [216, 203, 190], [67, 53, 39], [171, 160, 149], [104, 89, 74]];
    const hoveredRings = [false, false, false, false, false];
    
    push()
    textSize(40);
    text("Age at Time of Execution", 350, 200);
    pop()
    ageHover = false;
    
    // draw tree ring for each age group
    for (const [index, thresh] of threshs.entries()) {
        const rectPositions = drawTreeRing(thresh, regGrays[index]);
        if (hoverRing(rectPositions)) {
            hoveredRings[index] = true;
            drawTreeRing(thresh, hoveredColors[index]);
            drawAgeArc(hoveredRings, hoveredColors, index);
        }
    }
  
    if (!hoveredRings.reduce((a, b) => a || b)) { // reset animation whenever not hovering any rings
        arcSofts = arcVals.map((val) => new SoftNum(remap(val, 0, 593, 0, 2 * Math.PI) - Math.PI / 2, 0.1, 0.9));
    }
  
  // if exploring age from certain card
  if (cardExplore && ageStaticPoint.x) {
    push()
    textAlign(LEFT)
    text(ageStaticStatement, 100, 850)
    fill(gray(blink.value));
    rect(ageStaticPoint.x, ageStaticPoint.y, 50, 25);
    strokeWeight(0.5);
    line(250, 830, ageStaticPoint.x + 25, ageStaticPoint.y + 12.5);

    pop()
  }
    
    return 'age';
}

/**
 * Draw fraction of age pie chart based on age groups that user is currently hovering over.
 */
function drawAgeArc(hoveredRings, hoveredColors, ring) {
    const hoveredText = ['24 to 34 years old\n188 inmates', '35 to 44 years old\n243 inmates', '45 to 54 years old\n115 inmates', '55 to 64 years old\n41 inmates', 'More than 64 years old. The oldest inmate executed was 78.\n6 inmates']
    const X = 320; const Y = 450;
    const piePos = [[X + 35, Y - 20], [X, Y + 50], [X - 50, Y - 20], [X - 20, Y - 60], [X - 2, Y - 70]]
    const textLinePos = [[X + 110, Y - 60], [X + 70, Y + 110], [X - 135, Y - 55], [X - 60, Y - 125], [X - 7, Y - 160]];
    const textPos = [[X + 120, Y - 70], [X + 80, Y + 120], [X - 290, Y - 50], [X - 200, Y - 135], [X - 80, Y - 195]];
    if (hoveredRings[ring]) {
    push();
    strokeWeight(0.6);
    fill(...hoveredColors[ring]);
    arcSofts[ring].update();
    const arcStart = remap(arcVals[ring], 0, 593, 0, 2 * Math.PI) - Math.PI / 2; const arcEnd = remap(arcVals[ring + 1], 0, 593, 0, 2 * Math.PI) - Math.PI / 2;
    arcSofts[ring].setTarget(arcEnd);
    arc(X, Y, 200, arcStart, arcSofts[ring].value, PIE);
    textAlign(LEFT);
    let shade = remap(arcSofts[ring].value, arcStart, arcEnd, 100, 0)
    fill(gray(shade));
    stroke(gray(shade))
    text(hoveredText[ring],...textPos[ring]);
    line(...piePos[ring], ...textLinePos[ring])
    pop(); 
     } 
}

/**
 * Check whether any rectangle in an age ring is being hovered over.
 */
function hoverRing(rectPositions) {
    let hover = false;
    for (const {x, y} of rectPositions) {
        if (mouseIn(x - 10, y - 10, 70, 45)) {
            hover = true;
        }
    }
    return hover;
}

/**
 * Draw a tree ring of executions in the given age group in the given color.
 */
function drawTreeRing(minAge, color) {
    let angle = 0; let xOffset = 1100; let yOffset = 490; let speed = 25; let radius = 10; let speed2 = 0.5;
    let x; let y;
    let index = 0;
    const rectPositions = [];
    
    const goldenAngle = radians(137.5);
    for (let age = 78; age >= minAge; age--) {
        const rows = data.findRows(age, "Age when Executed")
        const execs = rows.length
        for (let exec = 1; exec <= execs; exec++) {
            index += 1;
            x = xOffset + radius * cos(angle); 
            y = yOffset + radius * sin(angle);
            angle += speed;
            radius += speed2;

            let randomX = randomXs[index - 1]; 
            let randomY = randomYs[index - 1]; 
            
            let X = x + randomX; let Y = y + randomY;
            
            rectPositions.push({x: X, y: Y})
            push()
            textAlign(LEFT);
            strokeWeight(0.5)
            stroke('black')
            if (typeof color === "number") {
                fill(gray(color))   
            } else {
                fill(...color)
            }
            
            rect(X, Y, 50, 25);
            fill('white')
            const ageRow = sorted_age.findRow(index - 1, "index")
            const age = ageRow['Age when Executed'];
            const execNum = ageRow['Execution Number']
            if (mouseIn(X, Y, 50, 25)) {// hover and click over one inmate
                ageHover = true;
                push()
                noStroke()
                fill(gray(90))
                rect(0, 650, 600, 500)
                pop()
                const row = data.findRow(execNum, "Execution Number")
                ageHoveredIndex = execNum;
                const fullName = `${row['First Name']} ${row['Last Name']}`;
                text(`${fullName} was executed at ${age} years old.`, 100, 700)
                rect(X, Y, 50, 25);
            }
              if (cardExplore && (execNum === cardExploreIndex)) {
                fill('white')
                ageStaticPoint = {x: X, y: Y};
                const row = data.findRow(execNum, "Execution Number")
                const fullName = `${row['First Name']} ${row['Last Name']}`;
                ageStaticStatement = `${fullName} was executed at ${age} years old.`;
            }
            pop()
        }
        radius += 2; 
    }
    return rectPositions;
}

let keywordHoverPos;
let keywordHoverIndex;
let keywordCluster;
let clusterPress = false;
let clusterPressed;
let clusterLabelHover;
let clusterIndex;
let clusterHoverIndex; 
/**
 * Draw interactive keyword page.
 */
function keywordPage() {
    push()
    fill('black')
    text('KEYWORD', keywordButtonPos.x + 15, keywordButtonPos.y + 15);
    pop()
    randFront = 0;
    clusterLabelHover = false;
    const keywordLabels = ['RELIGION', 'INNOCENCE', 'REMORSE', 'APOLOGIES', 'LOVE', 'FAMILY']
    const symbolCoords = [[
  [
    800,
    180
  ],
  [
    800,
    190
  ],
  [
    800,
    200
  ],
  [
    800,
    210
  ],
  [
    800,
    220
  ],
  [
    800,
    230
  ],
  [
    800,
    240
  ],
  [
    800,
    250
  ],
  [
    800,
    260
  ],
  [
    800,
    270
  ],
  [
    800,
    280
  ],
  [
    800,
    290
  ],
  [
    800,
    300
  ],
  [
    800,
    310
  ],
  [
    800,
    320
  ],
  [
    800,
    330
  ],
  [
    800,
    340
  ],
  [
    800,
    350
  ],
  [
    800,
    360
  ],
  [
    800,
    370
  ],
  [
    800,
    380
  ],
  [
    800,
    390
  ],
  [
    800,
    400
  ],
  [
    800,
    410
  ],
  [
    800,
    420
  ],
  [
    800,
    430
  ],
  [
    800,
    440
  ],
  [
    800,
    450
  ],
  [
    800,
    460
  ],
  [
    800,
    470
  ],
  [
    800,
    480
  ],
  [
    800,
    490
  ],
  [
    800,
    500
  ],
  [
    800,
    510
  ],
  [
    800,
    520
  ],
  [
    800,
    530
  ],
  [
    800,
    540
  ],
  [
    800,
    550
  ],
  [
    800,
    560
  ],
  [
    800,
    570
  ],
  [
    800,
    580
  ],
  [
    800,
    590
  ],
  [
    800,
    600
  ],
  [
    800,
    610
  ],
  [
    800,
    620
  ],
  [
    800,
    630
  ],
  [
    800,
    640
  ],
  [
    800,
    650
  ],
  [
    800,
    660
  ],
  [
    800,
    670
  ],
  [
    800,
    680
  ],
  [
    800,
    690
  ],
  [
    800,
    700
  ],
  [
    800,
    710
  ],
  [
    800,
    720
  ],
  [
    800,
    730
  ],
  [
    800,
    740
  ],
  [
    800,
    750
  ],
  [
    800,
    760
  ],
  [
    800,
    770
  ],
  [
    750,
    180
  ],
  [
    750,
    190
  ],
  [
    750,
    200
  ],
  [
    750,
    210
  ],
  [
    750,
    220
  ],
  [
    750,
    230
  ],
  [
    750,
    240
  ],
  [
    750,
    250
  ],
  [
    750,
    260
  ],
  [
    750,
    270
  ],
  [
    750,
    280
  ],
  [
    750,
    290
  ],
  [
    750,
    300
  ],
  [
    750,
    310
  ],
  [
    750,
    320
  ],
  [
    750,
    330
  ],
  [
    750,
    340
  ],
  [
    750,
    350
  ],
  [
    750,
    360
  ],
  [
    750,
    370
  ],
  [
    750,
    380
  ],
  [
    750,
    390
  ],
  [
    750,
    400
  ],
  [
    750,
    410
  ],
  [
    750,
    420
  ],
  [
    750,
    430
  ],
  [
    750,
    440
  ],
  [
    750,
    450
  ],
  [
    750,
    460
  ],
  [
    750,
    470
  ],
  [
    750,
    480
  ],
  [
    750,
    490
  ],
  [
    750,
    500
  ],
  [
    750,
    510
  ],
  [
    750,
    520
  ],
  [
    750,
    530
  ],
  [
    750,
    540
  ],
  [
    750,
    550
  ],
  [
    750,
    560
  ],
  [
    750,
    570
  ],
  [
    750,
    580
  ],
  [
    750,
    590
  ],
  [
    750,
    600
  ],
  [
    750,
    610
  ],
  [
    750,
    620
  ],
  [
    750,
    630
  ],
  [
    750,
    640
  ],
  [
    750,
    650
  ],
  [
    750,
    660
  ],
  [
    750,
    670
  ],
  [
    750,
    680
  ],
  [
    750,
    690
  ],
  [
    750,
    700
  ],
  [
    750,
    710
  ],
  [
    750,
    720
  ],
  [
    750,
    730
  ],
  [
    750,
    740
  ],
  [
    750,
    750
  ],
  [
    750,
    760
  ],
  [
    750,
    770
  ],
  [
    610,
    425
  ],
  [
    625,
    425
  ],
  [
    640,
    425
  ],
  [
    655,
    425
  ],
  [
    670,
    425
  ],
  [
    685,
    425
  ],
  [
    700,
    425
  ],
  [
    715,
    425
  ],
  [
    730,
    425
  ],
  [
    745,
    425
  ],
  [
    760,
    425
  ],
  [
    775,
    425
  ],
  [
    790,
    425
  ],
  [
    805,
    425
  ],
  [
    820,
    425
  ],
  [
    835,
    425
  ],
  [
    850,
    425
  ],
  [
    865,
    425
  ],
  [
    880,
    425
  ],
  [
    895,
    425
  ],
  [
    910,
    425
  ],
  [
    925,
    425
  ],
  [
    940,
    425
  ],
  [
    610,
    400
  ],
  [
    625,
    400
  ],
  [
    640,
    400
  ],
  [
    655,
    400
  ],
  [
    670,
    400
  ],
  [
    685,
    400
  ],
  [
    700,
    400
  ],
  [
    715,
    400
  ],
  [
    730,
    400
  ],
  [
    745,
    400
  ],
  [
    760,
    400
  ],
  [
    775,
    400
  ],
  [
    790,
    400
  ],
  [
    805,
    400
  ],
  [
    820,
    400
  ],
  [
    835,
    400
  ],
  [
    850,
    400
  ],
  [
    865,
    400
  ],
  [
    880,
    400
  ],
  [
    895,
    400
  ],
  [
    910,
    400
  ],
  [
    925,
    400
  ],
  [
    940,
    400
  ],
  [
    610,
    375
  ],
  [
    625.6521739130435,
    375
  ],
  [
    641.304347826087,
    375
  ],
  [
    656.9565217391305,
    375
  ],
  [
    672.6086956521739,
    375
  ],
  [
    688.2608695652174,
    375
  ],
  [
    703.9130434782609,
    375
  ],
  [
    719.5652173913044,
    375
  ],
  [
    735.2173913043479,
    375
  ],
  [
    750.8695652173913,
    375
  ],
  [
    766.5217391304348,
    375
  ],
  [
    782.1739130434783,
    375
  ],
  [
    797.8260869565217,
    375
  ],
  [
    813.4782608695652,
    375
  ],
  [
    829.1304347826087,
    375
  ],
  [
    844.7826086956522,
    375
  ],
  [
    860.4347826086956,
    375
  ],
  [
    876.0869565217391,
    375
  ],
  [
    891.7391304347826,
    375
  ],
  [
    907.391304347826,
    375
  ],
  [
    923.0434782608695,
    375
  ],
  [
    938.695652173913,
    375]], [
  [
    930,
    450
  ],
  [
    925.1792473552139,
    466.18780626942146
  ],
  [
    911.0745225910435,
    481.17503700212603
  ],
  [
    888.731908618425,
    493.8501578566874
  ],
  [
    859.8084549050498,
    503.2731131041425
  ],
  [
    826.4492816968424,
    508.7450452609394
  ],
  [
    791.1284862625928,
    509.8601261514323
  ],
  [
    756.4656504177718,
    506.53565532712923
  ],
  [
    725.0315581250672,
    499.01819358062653
  ],
  [
    699.1575322084254,
    487.86527665956316
  ],
  [
    680.7625308042911,
    473.9040653907745
  ],
  [
    671.210827015277,
    458.1699989457748
  ],
  [
    671.210827015277,
    441.8300010542252
  ],
  [
    680.7625308042911,
    426.09593460922554
  ],
  [
    699.1575322084254,
    412.13472334043684
  ],
  [
    725.0315581250672,
    400.98180641937347
  ],
  [
    756.4656504177717,
    393.46434467287077
  ],
  [
    791.1284862625927,
    390.1398738485677
  ],
  [
    826.4492816968425,
    391.2549547390606
  ],
  [
    859.8084549050498,
    396.7268868958575
  ],
  [
    888.731908618425,
    406.1498421433125
  ],
  [
    911.0745225910434,
    418.82496299787397
  ],
  [
    925.1792473552139,
    433.81219373057854
  ]], [
  [
    730,
    450
  ],
  [
    730,
    490
  ],
  [
    730,
    530
  ],
  [
    730,
    570
  ],
  [
    800,
    450
  ],
  [
    800,
    490
  ],
  [
    800,
    530
  ],
  [
    800,
    570
  ],
  [
    870,
    450
  ],
  [
    870,
    490
  ],
  [
    870,
    530
  ],
  [
    870,
    570
  ]],[
  [
    431.46741021714917,
    734.0887736636971
  ],
  [
    496.11889267817367,
    734.0887736636971
  ],
  [
    541.8259326280623,
    725.0217497216036
  ],
  [
    595.0535913140311,
    667.6520740534521
  ],
  [
    631.1337694877506,
    621.2168534242762
  ],
  [
    657.998155623608,
    576.061821408686
  ],
  [
    673.6736149777282,
    549.9217010022271
  ],
  [
    675.936456013363,
    491.7220559576837
  ],
  [
    684.0912966314031,
    503.5569494710468
  ],
  [
    694.3210606904231,
    459.18490743318483
  ],
  [
    707.1268617761692,
    416.8290645879733
  ],
  [
    719.6116369710468,
    383.7242483296214
  ],
  [
    719.6116369710468,
    348.49752923162583
  ],
  [
    736.794352032294,
    297.7127992761693
  ],
  [
    736.794352032294,
    253.7322522271715
  ],
  [
    746.3233400612472,
    223.15257864699333
  ],
  [
    759.6498294821826,
    245.3033651169265
  ],
  [
    759.6498294821826,
    308.3379732739421
  ],
  [
    759.6498294821826,
    355.0315805957684
  ],
  [
    759.6498294821826,
    360.10927060133633
  ],
  [
    759.6498294821826,
    403.3890416202673
  ],
  [
    763.0989003340757,
    450.2118422884187
  ],
  [
    763.0989003340757,
    499.0038627505568
  ],
  [
    764.3438543986637,
    551.0648663697104
  ],
  [
    764.3438543986637,
    581.8089678452116
  ],
  [
    764.3438543986637,
    618.3002157572383
  ],
  [
    763.3494571269488,
    690.2452498608018
  ],
  [
    754.6504384743874,
    742.6351092706013
  ],
  [
    738.6187186804009,
    803.1602345489978
  ],
  [
    706.8410704342984,
    856.2117204899778
  ],
  [
    651.1509082683741,
    869.7535321547884
  ],
  [
    544.2297118596881,
    762.0884952672606
  ],
  [
    586.8635161469932,
    738.9041620267261
  ],
  [
    623.6953646993318,
    687.3521018930958
  ],
  [
    563.6713530066814,
    708.7668777839643
  ],
  [
    627.962660077951,
    638.2155658407572
  ],
  [
    664.8258282293987,
    593.017469376392
  ],
  [
    664.8258282293987,
    529.7831987750557
  ],
  [
    725.0964817650333,
    437.3864664532294
  ],
  [
    725.2139302616926,
    486.6913453507795
  ],
  [
    721.1384674276169,
    543.4111393374164
  ],
  [
    765.5105094654788,
    472.2021158129176
  ],
  [
    669.3828298997772,
    637.322957266147
  ],
  [
    661.9992344097996,
    671.3712764476614
  ],
  [
    652.5328855790646,
    723.7767956570156
  ],
  [
    607.8241578507794,
    718.5111880567929
  ],
  [
    646.676120545657,
    760.8435412026727
  ],
  [
    694.9905171213808,
    697.3704586581292
  ],
  [
    715.9276691258351,
    664.6101579899778
  ],
  [
    714.138537026726,
    618.096638363029
  ],
  [
    721.4360036191537,
    572.033337973274
  ],
  [
    719.31410077951,
    589.8698496659242
  ],
  [
    721.8509883073497,
    518.3437152004454
  ],
  [
    769.5703125,
    522.5914358296213
  ],
  [
    766.4618422884187,
    646.3547466592428
  ],
  [
    713.1402248051224,
    640.1338912861916
  ],
  [
    712.5999617204899,
    721.8819599109131
  ],
  [
    703.5994919265033,
    755.2451628619153
  ],
  [
    675.2865743318486,
    804.1898663697104
  ],
  [
    649.6319077115812,
    841.6950863028953
  ],
  [
    585.2348969933184,
    786.0636483853007
  ],
  [
    637.8361636971047,
    791.5328333797328
  ],
  [
    614.663575306236,
    836.3198601057907
  ],
  [
    546.1480373051224,
    861.285495545657
  ],
  [
    567.0969341592427,
    820.0963077672606
  ],
  [
    599.3443763919821,
    859.2418917037862
  ],
  [
    763.5412896714921,
    715.8725118318486
  ],
  [
    739.2920900612472,
    770.0593332405346
  ],
  [
    1168.532589782851,
    734.0887736636971
  ],
  [
    1103.8811073218262,
    734.0887736636971
  ],
  [
    1058.1740673719378,
    725.0217497216036
  ],
  [
    1004.9464086859689,
    667.6520740534521
  ],
  [
    968.8662305122494,
    621.2168534242762
  ],
  [
    942.001844376392,
    576.061821408686
  ],
  [
    926.3263850222718,
    549.9217010022271
  ],
  [
    924.063543986637,
    491.7220559576837
  ],
  [
    915.9087033685969,
    503.5569494710468
  ],
  [
    905.6789393095769,
    459.18490743318483
  ],
  [
    892.8731382238308,
    416.8290645879733
  ],
  [
    880.3883630289532,
    383.7242483296214
  ],
  [
    880.3883630289532,
    348.49752923162583
  ],
  [
    863.205647967706,
    297.7127992761693
  ],
  [
    863.205647967706,
    253.7322522271715
  ],
  [
    853.6766599387528,
    223.15257864699333
  ],
  [
    840.3501705178174,
    245.3033651169265
  ],
  [
    840.3501705178174,
    308.3379732739421
  ],
  [
    840.3501705178174,
    355.0315805957684
  ],
  [
    840.3501705178174,
    360.10927060133633
  ],
  [
    840.3501705178174,
    403.3890416202673
  ],
  [
    836.9010996659243,
    450.2118422884187
  ],
  [
    836.9010996659243,
    499.0038627505568
  ],
  [
    835.6561456013363,
    551.0648663697104
  ],
  [
    835.6561456013363,
    581.8089678452116
  ],
  [
    835.6561456013363,
    618.3002157572383
  ],
  [
    836.6505428730512,
    690.2452498608018
  ],
  [
    845.3495615256126,
    742.6351092706013
  ],
  [
    861.3812813195991,
    803.1602345489978
  ],
  [
    893.1589295657016,
    856.2117204899778
  ],
  [
    948.8490917316259,
    869.7535321547884
  ],
  [
    1055.770288140312,
    762.0884952672606
  ],
  [
    1013.1364838530068,
    738.9041620267261
  ],
  [
    976.3046353006682,
    687.3521018930958
  ],
  [
    1036.3286469933187,
    708.7668777839643
  ],
  [
    972.037339922049,
    638.2155658407572
  ],
  [
    935.1741717706013,
    593.017469376392
  ],
  [
    935.1741717706013,
    529.7831987750557
  ],
  [
    874.9035182349667,
    437.3864664532294
  ],
  [
    874.7860697383074,
    486.6913453507795
  ],
  [
    878.8615325723831,
    543.4111393374164
  ],
  [
    834.4894905345212,
    472.2021158129176
  ],
  [
    930.6171701002228,
    637.322957266147
  ],
  [
    938.0007655902004,
    671.3712764476614
  ],
  [
    947.4671144209354,
    723.7767956570156
  ],
  [
    992.1758421492206,
    718.5111880567929
  ],
  [
    953.323879454343,
    760.8435412026727
  ],
  [
    905.0094828786192,
    697.3704586581292
  ],
  [
    884.0723308741649,
    664.6101579899778
  ],
  [
    885.861462973274,
    618.096638363029
  ],
  [
    878.5639963808463,
    572.033337973274
  ],
  [
    880.68589922049,
    589.8698496659242
  ],
  [
    878.1490116926503,
    518.3437152004454
  ],
  [
    830.4296875,
    522.5914358296213
  ],
  [
    833.5381577115813,
    646.3547466592428
  ],
  [
    886.8597751948776,
    640.1338912861916
  ],
  [
    887.4000382795101,
    721.8819599109131
  ],
  [
    896.4005080734967,
    755.2451628619153
  ],
  [
    924.7134256681514,
    804.1898663697104
  ],
  [
    950.3680922884188,
    841.6950863028953
  ],
  [
    1014.7651030066816,
    786.0636483853007
  ],
  [
    962.1638363028953,
    791.5328333797328
  ],
  [
    985.336424693764,
    836.3198601057907
  ],
  [
    1053.8519626948776,
    861.285495545657
  ],
  [
    1032.9030658407573,
    820.0963077672606
  ],
  [
    1000.6556236080179,
    859.2418917037862
  ],
  [
    836.4587103285079,
    715.8725118318486
  ],
  [
    860.7079099387528,
    770.0593332405346
  ]],[
  [
    805.7814043574092,
    399.19837327925876
  ],
  [
    831.8146115237325,
    409.6253631252116
  ],
  [
    836.5958873025493,
    408.8710432120956
  ],
  [
    760.93044228642,
    379.9802268704322
  ],
  [
    804.577454407976,
    434.679973974484
  ],
  [
    821.4334927176451,
    418.12565361014265
  ],
  [
    784.0250237698448,
    430.30034595814317
  ],
  [
    836.9293949073268,
    393.12015269890264
  ],
  [
    832.0112936763322,
    414.0884204594702
  ],
  [
    785.1076098339016,
    405.04736533619564
  ],
  [
    817.2224019031007,
    412.69657834673905
  ],
  [
    767.0490605044906,
    343.99030133209965
  ],
  [
    767.2801587751072,
    405.2305104792144
  ],
  [
    795.2701902555337,
    376.3740404793445
  ],
  [
    827.4208194535316,
    353.9040629719316
  ],
  [
    837.6752106467621,
    326.1147070884979
  ],
  [
    834.0797989661713,
    329.29837462010613
  ],
  [
    811.4723955721927,
    330.9928377413446
  ],
  [
    812.5026415920006,
    329.5577007552157
  ],
  [
    848.4877230379055,
    311.53334272992936
  ],
  [
    848.7293899139871,
    315.3057269567564
  ],
  [
    837.063164517031,
    365.5570697353055
  ],
  [
    795.797315739674,
    334.66977955106177
  ],
  [
    798.7780254283167,
    289.4765887653308
  ],
  [
    865.6421798847354,
    298.4193489571952
  ],
  [
    866.2798937206784,
    322.4599636755193
  ],
  [
    855.181980081239,
    333.0145218807716
  ],
  [
    829.5420605618286,
    277.8642726747775
  ],
  [
    876.7302743277679,
    307.6021486529092
  ],
  [
    878.14351125468,
    278.5326814043635
  ],
  [
    852.0069884674933,
    256.09123306995474
  ],
  [
    847.212382291934,
    271.18982488494373
  ],
  [
    905.7121535922721,
    311.5935925442827
  ],
  [
    913.0269468450394,
    268.90357181922855
  ],
  [
    877.3425881434509,
    293.25946181803226
  ],
  [
    921.7619035846351,
    252.34160636768743
  ],
  [
    903.1574318293206,
    281.7044129268247
  ],
  [
    909.3995076788854,
    230.6641561939812
  ],
  [
    885.972925353281,
    232.13262505727533
  ],
  [
    914.4044196486578,
    263.5714263906442
  ],
  [
    940.8938623226339,
    279.3806312355345
  ],
  [
    929.7272494211511,
    262.07382824392556
  ],
  [
    949.4851555763347,
    258.66251726093094
  ],
  [
    966.7969785842093,
    226.50706710293713
  ],
  [
    948.2762522224576,
    282.6405932600377
  ],
  [
    937.8621561525906,
    246.19273214679342
  ],
  [
    1007.5839243370701,
    251.3607948928169
  ],
  [
    1029.610753286249,
    237.3748689270181
  ],
  [
    1012.5998786320711,
    228.62420769984314
  ],
  [
    1041.7082054437947,
    244.5627323210645
  ],
  [
    1001.1491589274264,
    239.4059629787346
  ],
  [
    984.7011125384828,
    286.475224201393
  ],
  [
    1048.5440118434228,
    284.62625831074394
  ],
  [
    1057.2216909210676,
    248.93992185787
  ],
  [
    1045.7847062239666,
    267.0007946217907
  ],
  [
    1071.9448896587312,
    265.7739748929244
  ],
  [
    1035.3473415441026,
    330.86069062027696
  ],
  [
    1074.2083826600958,
    269.7715072802099
  ],
  [
    1046.3635974381525,
    293.13421652012795
  ],
  [
    1094.40739909914,
    332.41669921220546
  ],
  [
    1107.9473782677626,
    336.39433230882764
  ],
  [
    1125.121419013198,
    339.1974893055951
  ],
  [
    1069.4278418264214,
    364.37288666064217
  ],
  [
    1060.173177727064,
    357.5026882546894
  ],
  [
    1101.963465068415,
    327.3529311151546
  ],
  [
    1108.9895102145358,
    322.4276398453296
  ],
  [
    1108.8423330368964,
    364.4771224955616
  ],
  [
    1119.4006638358348,
    397.09035317256365
  ],
  [
    1115.5624363023062,
    416.6923358202541
  ],
  [
    1123.5986359746585,
    345.5761473259247
  ],
  [
    1129.2214557689429,
    409.74516070199104
  ],
  [
    1133.5454297650122,
    430.77347480846447
  ],
  [
    1098.8681394453765,
    375.23225540566807
  ],
  [
    1129.497714263231,
    398.0528015323863
  ],
  [
    1101.791947750769,
    398.13485861799836
  ],
  [
    1111.1541047816245,
    404.686807596404
  ],
  [
    1089.511442060981,
    403.4850498639887
  ],
  [
    1149.9290514479599,
    467.1856955440072
  ],
  [
    1138.6283136921097,
    444.2346134153638
  ],
  [
    1090.7049726781634,
    476.61446678449335
  ],
  [
    1107.1111206060968,
    502.3269201298582
  ],
  [
    1115.9658391328917,
    470.8807565827732
  ],
  [
    1076.878562199436,
    512.5282604682346
  ],
  [
    1130.9231236833439,
    490.1354437068784
  ],
  [
    1115.895494824649,
    515.8626273430641
  ],
  [
    1110.591382199528,
    514.7354380174315
  ],
  [
    1108.4432708235836,
    487.5596448163495
  ],
  [
    1043.6859394639243,
    554.7327441703602
  ],
  [
    1060.0216475277755,
    558.6736031247527
  ],
  [
    1042.0312603980728,
    535.8218875881865
  ],
  [
    1074.9355949703354,
    574.494328087835
  ],
  [
    1019.6503157515971,
    599.8227260069023
  ],
  [
    1081.4636431953656,
    565.3764244353905
  ],
  [
    1005.7631921723099,
    553.5187557063258
  ],
  [
    1066.4881436615503,
    556.4304860423498
  ],
  [
    1011.5333805695471,
    598.3047556031747
  ],
  [
    1004.0818433364228,
    627.8398412351005
  ],
  [
    1039.828576304967,
    620.8754535896435
  ],
  [
    1021.2947128749005,
    618.4473905506756
  ],
  [
    1019.2085973529188,
    599.9072055927413
  ],
  [
    1023.6804489397434,
    641.4832733140098
  ],
  [
    985.1958679946473,
    619.2816102758879
  ],
  [
    976.4523905451795,
    628.4273151713303
  ],
  [
    943.8186823141164,
    685.3043115087955
  ],
  [
    982.5700654805878,
    640.1039742054056
  ],
  [
    958.4604633407437,
    676.2178991775319
  ],
  [
    934.3032450128239,
    657.7280115707186
  ],
  [
    970.05296977544,
    663.327631458505
  ],
  [
    930.3840918479275,
    666.824266090922
  ],
  [
    945.2488958908514,
    671.7585744060698
  ],
  [
    906.3414302404129,
    704.6148903400572
  ],
  [
    871.6183556194718,
    733.3473280922092
  ],
  [
    899.265985831585,
    695.3160340492532
  ],
  [
    894.2274703706845,
    726.1970677494058
  ],
  [
    857.8447132097278,
    699.5895320235824
  ],
  [
    903.132073260635,
    687.665179519101
  ],
  [
    887.9082372189732,
    691.0849379853219
  ],
  [
    886.510818719197,
    731.4218931844127
  ],
  [
    844.3299311500365,
    710.4221801412989
  ],
  [
    861.8355890568444,
    761.6189176354121
  ],
  [
    830.2583456006436,
    748.5654078655172
  ],
  [
    830.9160064880026,
    757.1486578057593
  ],
  [
    880.472550169597,
    785.3520662060865
  ],
  [
    822.0226057430585,
    800.943550448099
  ],
  [
    866.2801505346099,
    751.9658159334267
  ],
  [
    801.2329958789798,
    818.8146032390301
  ],
  [
    834.712615656382,
    773.2479656848476
  ],
  [
    832.0514614963128,
    764.0535472366282
  ],
  [
    834.1387090312635,
    760.7983440484501
  ],
  [
    830.5877623249327,
    816.3388772125722
  ],
  [
    818.0868439197127,
    829.4327796814487
  ],
  [
    776.8737664525604,
    817.9716039399788
  ],
  [
    838.6975565907157,
    823.1506584990531
  ],
  [
    819.5821760092048,
    814.136640142732
  ],
  [
    808.9995678740945,
    813.0988654106578
  ],
  [
    796.0240567957514,
    827.7500105823867
  ],
  [
    780.957324098708,
    861.5861971111435
  ],
  [
    791.3557726043955,
    838.3434699070767
  ],
  [
    832.9599406469775,
    862.9295011862664
  ],
  [
    801.8045979165692,
    811.3618801509929
  ],
  [
    765.8752300292533,
    815.7884489448086
  ],
  [
    822.2628103916692,
    874.2462429766578
  ],
  [
    830.5755290117752,
    829.2207247838292
  ],
  [
    782.6657361711293,
    835.839322532971
  ],
  [
    781.5497259714281,
    853.4077779251228
  ],
  [
    796.2713993125169,
    845.1442291504635
  ],
  [
    764.9302426434353,
    811.6233810388509
  ],
  [
    770.7674363647803,
    810.5420088351904
  ],
  [
    803.8066798269048,
    815.3928124173481
  ],
  [
    777.8672696224828,
    838.4827257905633
  ],
  [
    779.8425031561936,
    800.2718825345578
  ],
  [
    831.9174506182935,
    816.0304912550442
  ],
  [
    837.6270485550185,
    801.8806490892084
  ],
  [
    828.6567235789255,
    812.0323656216946
  ],
  [
    793.4398597586451,
    868.281440544191
  ],
  [
    792.2374041291026,
    812.7676227200329
  ],
  [
    804.3061331020176,
    801.0322895268323
  ],
  [
    791.4056770299813,
    823.5877103243654
  ],
  [
    831.1338986844032,
    804.9245523965094
  ],
  [
    829.0692577266798,
    834.667059613772
  ],
  [
    756.3902709786238,
    784.2016989290444
  ],
  [
    794.6459355996521,
    832.1867998777892
  ],
  [
    799.7465009659626,
    812.8610463908445
  ],
  [
    762.467685270437,
    830.1848626589092
  ],
  [
    778.6350170623803,
    834.375148552044
  ],
  [
    819.6872590155357,
    770.3069437645353
  ],
  [
    801.5468058933055,
    792.402253425102
  ],
  [
    781.0843775685607,
    822.49781024086
  ],
  [
    770.2081873579643,
    772.8958962881685
  ],
  [
    799.1563289577672,
    787.2256603786454
  ],
  [
    756.3835162672984,
    760.0794986618495
  ],
  [
    757.9687055776436,
    744.0824595051708
  ],
  [
    793.4234460701367,
    785.6503591251721
  ],
  [
    752.7518575959623,
    727.4832050777787
  ],
  [
    712.7851719220531,
    725.808517905715
  ],
  [
    749.6145637979673,
    729.5581459374331
  ],
  [
    763.9786781009566,
    762.865589338321
  ],
  [
    764.5017901125384,
    709.3600581471577
  ],
  [
    696.6832903570663,
    753.1023497205628
  ],
  [
    682.1634228366182,
    755.1457804593933
  ],
  [
    730.7763392439622,
    698.1844377995421
  ],
  [
    675.5645240799217,
    671.866248532309
  ],
  [
    727.2167386491241,
    679.8822705776619
  ],
  [
    662.7771476830702,
    727.7464835466678
  ],
  [
    685.5229912115113,
    712.9749243781631
  ],
  [
    642.2388381855255,
    694.404379515227
  ],
  [
    667.6556777402485,
    711.9380628768433
  ],
  [
    695.3150359021217,
    631.2055332639468
  ],
  [
    663.3183547354307,
    655.9333779915762
  ],
  [
    631.8862894046712,
    665.535165276576
  ],
  [
    652.5466570008549,
    628.1529238680589
  ],
  [
    601.0110080180863,
    673.837853142136
  ],
  [
    600.6735960940503,
    628.44697175932
  ],
  [
    598.9906310398995,
    643.1527359352551
  ],
  [
    578.4044644547633,
    633.6865572030322
  ],
  [
    583.735173460407,
    633.6993725659015
  ],
  [
    608.2519026600136,
    627.5342403745342
  ],
  [
    565.6737133253959,
    618.8560650332889
  ],
  [
    553.1235957571043,
    625.2269086336089
  ],
  [
    535.7563268561378,
    626.0178071853063
  ],
  [
    562.2314640026318,
    561.8932588418112
  ],
  [
    537.9370172727625,
    566.9508883623207
  ],
  [
    570.6736256784694,
    568.8622323377206
  ],
  [
    525.0248112636473,
    530.9284516085479
  ],
  [
    522.8974770145,
    541.3491334186758
  ],
  [
    496.805458385289,
    532.6160721766182
  ],
  [
    503.0976940026777,
    552.7755291019886
  ],
  [
    521.0028443570808,
    533.3939313298591
  ],
  [
    497.0788178273548,
    539.2306935488019
  ],
  [
    512.4836137757922,
    500.3882161359511
  ],
  [
    529.3174637696335,
    483.0934865769493
  ],
  [
    462.48516787660884,
    460.13571323922264
  ],
  [
    519.9026493728549,
    492.4125231419999
  ],
  [
    492.2311489234524,
    504.64167879356825
  ],
  [
    505.9381340346046,
    477.7371534870648
  ],
  [
    498.6298091274823,
    492.5216198806688
  ],
  [
    454.5887756461729,
    489.640769125391
  ],
  [
    501.63963461527226,
    463.0499431560665
  ],
  [
    453.9173998980783,
    467.59149881143566
  ],
  [
    464.2597665046368,
    411.1369744644203
  ],
  [
    457.968232438282,
    454.8647044545858
  ],
  [
    463.42928745570356,
    407.4893369052554
  ],
  [
    447.7624029361532,
    407.8619477725513
  ],
  [
    501.2954155654529,
    367.73295178521585
  ],
  [
    517.8413989020867,
    389.7958849288848
  ],
  [
    466.154539440495,
    399.0017528416282
  ],
  [
    461.0833638777324,
    364.6683973024097
  ],
  [
    517.5005552217156,
    384.79613217085995
  ],
  [
    520.8437809851442,
    389.1816251379057
  ],
  [
    515.041793616006,
    319.4237163468903
  ],
  [
    471.20061242787096,
    379.4704561602443
  ],
  [
    506.2299818104061,
    340.5666725130675
  ],
  [
    503.92797287271173,
    315.3375311793633
  ],
  [
    511.6651550178062,
    284.87216338161636
  ],
  [
    480.31772797798965,
    346.6745282347363
  ],
  [
    556.090071471552,
    310.4882823126189
  ],
  [
    507.6568132831136,
    344.16860044956604
  ],
  [
    532.0786215186283,
    311.1034693289507
  ],
  [
    536.9937418131742,
    317.59918484737585
  ],
  [
    525.5071288211125,
    300.3907732844717
  ],
  [
    597.5401650629125,
    301.95370462786457
  ],
  [
    532.1487316957596,
    263.6148237705395
  ],
  [
    584.4436084696628,
    300.0378937905496
  ],
  [
    597.931183908699,
    237.86160486925564
  ],
  [
    561.7875627132156,
    304.6532760994339
  ],
  [
    632.6839522724005,
    305.5584637595085
  ],
  [
    613.5325972888708,
    288.050511981154
  ],
  [
    631.7266883780079,
    226.1530683497417
  ],
  [
    591.574076648113,
    225.77889620277003
  ],
  [
    658.2226879110484,
    230.41658123784669
  ],
  [
    610.1922792600603,
    248.38628074176395
  ],
  [
    647.9174256226013,
    233.73660543420996
  ],
  [
    686.3822766609181,
    271.8694309680344
  ],
  [
    687.1441630217109,
    293.3313147335366
  ],
  [
    657.2274689414437,
    256.70932861525296
  ],
  [
    637.2898232847969,
    295.3886472183604
  ],
  [
    658.3505363103251,
    252.1722666619304
  ],
  [
    719.7652937373293,
    291.4665779848924
  ],
  [
    720.59120720847,
    263.4142422145031
  ],
  [
    700.5396902790447,
    296.1447578150811
  ],
  [
    697.1659369537133,
    262.04919790536394
  ],
  [
    689.8481696854626,
    255.63159928561691
  ],
  [
    750.5535003629486,
    252.17530926894477
  ],
  [
    740.8367902199963,
    265.2433233449534
  ],
  [
    749.5402376950633,
    317.16717696180564
  ],
  [
    777.804615687722,
    266.38819792618426
  ],
  [
    750.172132528049,
    297.7986528473533
  ],
  [
    711.7471653391456,
    286.4349512104937
  ],
  [
    718.9804180040802,
    342.59829928418503
  ],
  [
    754.6495143626663,
    321.0853512790874
  ],
  [
    766.3078096236791,
    335.1062164664108
  ],
  [
    783.2451647559144,
    313.93250165643974
  ],
  [
    792.0657812469352,
    292.37237325315135
  ],
  [
    784.9498096040667,
    343.6062140129621
  ],
  [
    746.44723143155,
    364.4229958060644
  ],
  [
    768.3265294609495,
    356.8959084275191
  ],
  [
    757.690217575123,
    351.6974546182523
  ],
  [
    819.748568926522,
    320.04552121413064
  ],
  [
    773.0136554810827,
    388.05219397815205
  ],
  [
    806.1697623285692,
    354.36653752768206
  ],
  [
    760.0497221838581,
    335.1348703478959
  ],
  [
    796.2339982871531,
    338.2602577356832
  ],
  [
    805.4837779264523,
    404.71357528600817
  ],
  [
    782.8310423120852,
    416.1166114507908
  ],
  [
    797.6933924135168,
    367.2086800478155
  ],
  [
    813.8636789241314,
    391.29300272245234
  ],
  [
    797.3902677361455,
    390.45067567209253
  ],
  [
    782.839715546619,
    410.4245608095302
  ],
  [
    816.4213965566428,
    354.71833225965025
  ],
  [
    789.3143311645765,
    422.1372405378514
  ],
  [
    793.5025904820129,
    428.1512478635232
  ],
  [
    828.6842746339893,
    390.25501591175725
  ],
  [
    799.0307464703927,
    438.78110890289764
  ],
  [
    815.6625722610661,
    385.5024924727121
  ]
],[
  [
    575,
    500
  ],
  [
    575,
    525
  ],
  [
    575,
    550
  ],
  [
    575,
    575
  ],
  [
    575,
    600
  ],
  [
    575,
    625
  ],
  [
    575,
    650
  ],
  [
    575,
    675
  ],
  [
    575,
    700
  ],
  [
    575,
    725
  ],
  [
    575,
    750
  ],
  [
    575,
    775
  ],
  [
    575,
    800
  ],
  [
    575,
    825
  ],
  [
    625,
    500
  ],
  [
    625,
    525
  ],
  [
    625,
    550
  ],
  [
    625,
    575
  ],
  [
    625,
    600
  ],
  [
    625,
    625
  ],
  [
    625,
    650
  ],
  [
    625,
    675
  ],
  [
    625,
    700
  ],
  [
    625,
    725
  ],
  [
    625,
    750
  ],
  [
    625,
    775
  ],
  [
    625,
    800
  ],
  [
    625,
    825
  ],
  [
    675,
    500
  ],
  [
    675,
    525
  ],
  [
    675,
    550
  ],
  [
    675,
    575
  ],
  [
    675,
    600
  ],
  [
    675,
    625
  ],
  [
    675,
    650
  ],
  [
    675,
    675
  ],
  [
    675,
    700
  ],
  [
    675,
    725
  ],
  [
    675,
    750
  ],
  [
    675,
    775
  ],
  [
    675,
    800
  ],
  [
    675,
    825
  ],
  [
    725,
    500
  ],
  [
    725,
    525
  ],
  [
    725,
    550
  ],
  [
    725,
    575
  ],
  [
    725,
    600
  ],
  [
    725,
    625
  ],
  [
    725,
    650
  ],
  [
    725,
    675
  ],
  [
    725,
    700
  ],
  [
    725,
    725
  ],
  [
    725,
    750
  ],
  [
    725,
    775
  ],
  [
    725,
    800
  ],
  [
    725,
    825
  ],
  [
    775,
    500
  ],
  [
    775,
    525
  ],
  [
    775,
    550
  ],
  [
    775,
    575
  ],
  [
    775,
    600
  ],
  [
    775,
    625
  ],
  [
    775,
    650
  ],
  [
    775,
    675
  ],
  [
    775,
    700
  ],
  [
    775,
    725
  ],
  [
    775,
    750
  ],
  [
    775,
    775
  ],
  [
    775,
    800
  ],
  [
    775,
    825
  ],
  [
    825,
    500
  ],
  [
    825,
    525
  ],
  [
    825,
    550
  ],
  [
    825,
    575
  ],
  [
    825,
    600
  ],
  [
    825,
    625
  ],
  [
    825,
    650
  ],
  [
    875,
    500
  ],
  [
    875,
    525
  ],
  [
    875,
    550
  ],
  [
    875,
    575
  ],
  [
    875,
    600
  ],
  [
    875,
    625
  ],
  [
    875,
    650
  ],
  [
    925,
    500
  ],
  [
    925,
    525
  ],
  [
    925,
    550
  ],
  [
    925,
    575
  ],
  [
    925,
    600
  ],
  [
    925,
    625
  ],
  [
    925,
    650
  ],
  [
    925,
    675
  ],
  [
    925,
    700
  ],
  [
    925,
    725
  ],
  [
    925,
    750
  ],
  [
    925,
    775
  ],
  [
    925,
    800
  ],
  [
    925,
    825
  ],
  [
    975,
    500
  ],
  [
    975,
    525
  ],
  [
    975,
    550
  ],
  [
    975,
    575
  ],
  [
    975,
    600
  ],
  [
    975,
    625
  ],
  [
    975,
    650
  ],
  [
    975,
    675
  ],
  [
    975,
    700
  ],
  [
    975,
    725
  ],
  [
    975,
    750
  ],
  [
    975,
    775
  ],
  [
    975,
    800
  ],
  [
    975,
    825
  ],
  [
    1025,
    500
  ],
  [
    1025,
    525
  ],
  [
    1025,
    550
  ],
  [
    1025,
    575
  ],
  [
    1025,
    600
  ],
  [
    1025,
    625
  ],
  [
    1025,
    650
  ],
  [
    1025,
    675
  ],
  [
    1025,
    700
  ],
  [
    1025,
    725
  ],
  [
    1025,
    750
  ],
  [
    1025,
    775
  ],
  [
    1025,
    800
  ],
  [
    1025,
    825
  ],
  [
    550,
    470
  ],
  [
    600,
    470
  ],
  [
    650,
    470
  ],
  [
    700,
    470
  ],
  [
    750,
    470
  ],
  [
    800,
    470
  ],
  [
    850,
    470
  ],
  [
    900,
    470
  ],
  [
    950,
    470
  ],
  [
    1000,
    470
  ],
  [
    1050,
    470
  ],
  [
    575,
    450
  ],
  [
    625,
    450
  ],
  [
    675,
    450
  ],
  [
    725,
    450
  ],
  [
    775,
    450
  ],
  [
    825,
    450
  ],
  [
    875,
    450
  ],
  [
    925,
    450
  ],
  [
    975,
    450
  ],
  [
    1025,
    450
  ],
  [
    600,
    430
  ],
  [
    650,
    430
  ],
  [
    700,
    430
  ],
  [
    750,
    430
  ],
  [
    800,
    430
  ],
  [
    850,
    430
  ],
  [
    900,
    430
  ],
  [
    950,
    430
  ],
  [
    1000,
    430
  ],
  [
    625,
    410
  ],
  [
    675,
    410
  ],
  [
    725,
    410
  ],
  [
    775,
    410
  ],
  [
    825,
    410
  ],
  [
    875,
    410
  ],
  [
    925,
    410
  ],
  [
    975,
    410
  ],
  [
    650,
    390
  ],
  [
    700,
    390
  ],
  [
    750,
    390
  ],
  [
    800,
    390
  ],
  [
    850,
    390
  ],
  [
    900,
    390
  ],
  [
    950,
    390
  ],
  [
    675,
    370
  ],
  [
    725,
    370
  ],
  [
    775,
    370
  ],
  [
    825,
    370
  ],
  [
    875,
    370
  ],
  [
    925,
    370
  ],
  [
    700,
    350
  ],
  [
    750,
    350
  ],
  [
    800,
    350
  ],
  [
    850,
    350
  ],
  [
    900,
    350
  ],
  [
    725,
    330
  ],
  [
    775,
    330
  ],
  [
    825,
    330
  ],
  [
    875,
    330
  ],
  [
    750,
    310
  ],
  [
    800,
    310
  ],
  [
    850,
    310
  ],
  [
    775,
    290
  ]
]];
    
    keywordHoverPos = undefined;
    let labelY;
    const labelX = 1500;
    
    let exploreClusters = [];
    let currentExploreRect;
    let exploreName;
    if (cardExplore) {
        exploreClusters = keywordExploreIndex();
    }
    
    push()
    textAlign(RIGHT);
    rectMode(CORNER);
    
    // create keyword labels and check if they're being hovered
    for (let k = 0; k < 6; k++) {
      const height = 300 + k * 75;
      push()
      fill(gray(30))
      text(keywordLabels[k], labelX, height - 20);
      textSize(15)
      text(keywordsDisplay[k], labelX, height);
      pop()
      const labelInfo = [labelX - textWidth(keywordLabels[k]), height - 40, textWidth(keywordLabels[k]), 50];
      if (mouseIn(...labelInfo) || (exploreClusters.includes(k))) {
        labelY = height;  
        push()
        if (exploreClusters.includes(k)) {
          stroke(gray(blink.value))
          fill(gray(blink.value));
        } 
        if (mouseIn(...labelInfo)) {
          clusterHoverIndex = k; 
          clusterLabelHover = true;
          fill('white');
        }
        text(keywordLabels[k], labelX, labelY - 20);
        pop()
      } 
    }
    pop()

    // if user has clicked on a keyword label, draw the group symbol and interact with rectangles
    if (clusterPress) {
        push()
        textAlign(RIGHT);
        fill('white')
        text(keywordLabels[clusterIndex], labelX, 300 + clusterIndex * 75 - 20);
        pop()
      let symbolIndex = 0;
      const cluster = keywords[clusterIndex]
      for (let i = 1; i <= 593; i++) {
            const row = data.findRow(i, "Execution Number");
            const fullName = `${row['First Name']} ${row['Last Name']}`;
            const lastStatement = row['Last Statement']
            let show = false;
            for (const word of lastStatement.split(" ").map(word => word.toLowerCase())) {
              if (cluster.includes(word)) {
                show = true;
                break;
              }
            }
            push()
            strokeWeight(0.4)
            fill(gray(80))
            if (show) {
              const rectInfo = [...symbolCoords[clusterIndex][symbolIndex], 50, 25]
              if (cardExplore && i === cardExploreIndex) {
                  currentExploreRect = rectInfo;
                  exploreName = fullName;
              }
              rect(...rectInfo);
              if (mouseIn(...rectInfo)) {
                keywordHoverPos = symbolCoords[clusterIndex][symbolIndex];
                keywordHoverIndex = i;
                keywordCluster = cluster;
              }
              symbolIndex ++;
            }
            pop()
      }
      push()
      textAlign(LEFT)
      text(`${symbolCoords[clusterIndex].length} of 593 inmates mentioned ${keywordLabels[clusterIndex].toLowerCase()}\nin their last statement.`, 100, 500);
      if (cardExplore && exploreClusters.includes(clusterIndex)) {
            text(`${exploreName} was one of them.`, 100, 550)
      }
      pop()
    if (keywordHoverPos) {
      push()
      fill(gray(50))
      rect(...keywordHoverPos, 50, 25)
      pop()
    }
    
    // if user reached keyword page through certain card
    if (cardExplore && exploreClusters.includes(clusterIndex)) {
      if (exploreClusters.length === 0) {
          push()
            fill('white')
            textAlign(LEFT);
            text(`${exploreName}'s last statement did not mention any of the listed keywords.`, 100, 550)
          pop()
      } else {
      push()
       fill(gray(blink.value));
       rect(...currentExploreRect)
       pop()
      }
    }
    }
    return 'keyword';
}

/**
 * Get keyword groups that the selected last statement are a part of.
 */
function keywordExploreIndex() {
    const row = data.findRow(cardExploreIndex, "Execution Number");
    const lastStatement = row['Last Statement'];
    const thisClusters = [];
    for (const word of lastStatement.split(" ").map(word => word.toLowerCase())) {
      for (let k = 0; k < keywords.length; k++) {
        if (keywords[k].includes(word)) {
          thisClusters.push(k);
        }
      }
    }
    return thisClusters;
}

/**
 * Draw interactive scrolling home page of randomized execution information.
 */
function homePage() {
  scrollOffset = (scrollOffset + 0.4) % 14800; // reset scroll close to end
  push()
  translate(0, 50);
  currentPage = 'home'; pageStack = ['home'];
  for (const card of preloadedCards) {
      cardDisplay(card.index, card.x + scrollOffset, card.y, card.w, card.h);
      if (mouseIn(card.x + scrollOffset, card.y + 50, card.w, card.h)) {
          cardHover = {index: card.index, x: card.x, y: card.y, w: card.w, h: card.h};
        }
  }
  d.update();
  if (cardHover.index) { // breathing hover animation
      push()
      fill(gray(10))
      rectMode(CENTER);
      
      const [x, y, w, h] = Object.values(cardHover).slice(1)
      rect(x + w / 2 + scrollOffset, y + h / 2, w * d.value, h * d.value);
      push()
      fill('black')
      const row = data.findRow(cardHover.index, "Execution Number")
        fullName = `${row['First Name']} ${row['Last Name']}`;
        textSize(13 * d.value)
        wrapText(fullName, x + (w/2) + scrollOffset, y + (h/2), w - 50)
        pop()
      noStroke();
    if (elapsed() - prevMillis > 3) {
      if (expanding) {
        d.setTarget(1.3); // grow
      } else {
        d.setTarget(1); // shrink
      }
      expanding = !expanding;
      prevMillis = elapsed();
    }
      pop()
      rectMode(CORNER);
  }
  pop()
  
  // intro animation
  push()
  beginOpac -= 0.001;
  fill(gray(100, beginOpac))
  rect(0, 0, width, height)
  pop()
  push()
  fill(gray(0, beginOpac))
  textSize(25);
  text("Since 1973, the final words of 593 inmates executed by lethal injection in Texas have been recorded, in addition to the crimes they committed.\nYou are invited to sit with the discomfort in confronting both the sympathy for those asking for forgiveness and saying goodbye to their families,\nand the stark animosity felt when reading the crimes that placed them on death row.", W, H + 30);
  pop()
  return 'home';
}

/**
 * Randomize card order and load into an array.
 */
function preloadCards() {
  for (let i = -12800; i < 1600; i += 200) {
      for (let j = 0; j < 900; j += 100) {
      randIndex = round(random(1, 593));
      while (seenCardDisplays.includes(randIndex)) {
          randIndex = round(random(1, 593));
      }
      preloadedCards.push({ index: randIndex, x: i, y: j, w: 200, h: 100 })      
      }
  }
}

/**
 * Draw mini card display with hover animation.
 */
function cardDisplay(index, x, y, w, h) {
    seenCardDisplays.push(index);
    const row = data.findRow(index, "Execution Number");
    fullName = `${row['First Name']} ${row['Last Name']}`;
    push()
    fill(0, 0)
    if (visitedCardIndices.includes(index)) {
      fill(gray(100))
    }
    rect(x, y, w, h);
    pop()
    push()
    if (visitedCardIndices.includes(index)) {
      fill(gray(60))
    }
    textSize(13)
    wrapText(fullName, x + (w/2), y + (h/2), w - 50);
    pop()
}

let cardToTimelineHover;
let cardToAgeHover;
let cardToKeywordHover;
let cardExplore;
let cardExploreIndex;
/**
 * Draw interactive card page.
 */
function cardPage(randIndex, randFront, fromKeyword=false) {
  const row = data.findRow(randIndex, "Execution Number");
  const fullName = `${row['First Name']} ${row['Last Name']}`
  let title;
  let info;
  if ((flipCard && randFront === 0) || (!flipCard && randFront === 1)) {
  title = `${fullName}'s Last Statement`;
  info = row['Last Statement'];
  } else {
    title = `${fullName}'s Crime`;
    info = row['Inmate Information'];
  }
    text(title, W, H - 70)
    line(W - 100, H - 40, W + 100, H - 40)
    wrapText(info, W, H + 10, 1200, fromKeyword)
    
    // find on other pages
    cardToTimelineHover = false;
    cardToAgeHover = false;
    cardToKeywordHover = false;
    cardExploreIndex = randIndex;

    push()
    textFont(italic)
    textAlign(LEFT);
    fill(gray(20));
    stroke(gray(20));
    text(`find ${fullName} on the timeline, age, or keyword page.`, 570, 910);
    const lineX = 570 + textWidth(`find ${fullName} on the `)
    line(lineX, 912, lineX + 60, 912);
    line(lineX + 68, 912, lineX + 90, 912);
    line(lineX + 120, 912, lineX + 180, 912);

    // draw interactive navigation buttons to other pages for this card
    push()
    fill('white')
    stroke('white')
    if (mouseIn(lineX, 900, 60, 20)) {
      text('timeline', lineX, 910);
      line(lineX, 912, lineX + 60, 912);
      cardToTimelineHover = true;
    } else if (mouseIn(lineX + 68, 900, 22, 20)) {
      text('age', lineX + 67, 910);
      line(lineX + 68, 912, lineX + 90, 912);
      cardToAgeHover = true;
    } else if (mouseIn(lineX + 120, 900, 60, 20)) {
      text('keyword', lineX + 119, 910);
      line(lineX + 120, 912, lineX + 180, 912);
      cardToKeywordHover = true;
    }
    
    pop()
    pop()
  
  drawNavButtons();

}

/**
 * Draw top back and home buttons and wait for click when not on home page.
 */
function drawNavButtons() {
  push()
  fill(gray(50))
  if (mouseNear(backButtonPos.x, backButtonPos.y, 20)) {
      fill('black')
      backButtonHover = true;
  }
  text('BACK', backButtonPos.x, backButtonPos.y);
  fill(gray(50))
  if (mouseNear(homeButtonPos.x, homeButtonPos.y, 20)) {
      fill('black')
      homeButtonHover = true;
  }
  text('HOME', homeButtonPos.x, homeButtonPos.y)
  pop()
}

/**
 * Return MONTH DAY, YEAR date format given YEAR-MONTH-DAY format.
 */
function formatDate(dateString) {
    const months = [ 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December' ];
    return `${months[Number(dateString.slice(5, 7)) - 1]} ${dateString.slice(8)}, ${dateString.slice(0, 4)}`
}

/**
 * Draw text given maximum width to bound text box by.
 */
function wrapText(txt, width, height, maxWidth, fromKeyword) {
  if (txt === '') {
    txt = 'No last statement given.'
  }
  
  let words = txt.split(' ');
  let lines = [];
  let currentLine = '';

  for (let i = 0; i < words.length; i++) {
    let testLine = currentLine + words[i] + ' ';
    let testWidth = textWidth(testLine);
    if (testWidth > maxWidth && currentLine.length > 0) {
      lines.push(currentLine);
      currentLine = words[i] + ' ';
    } else {
      currentLine = testLine;
    }
  }
  lines.push(currentLine.trim()); // push the last line
  
  let count = 0
  for (const line of lines) {
    if (fromKeyword) {
      const words = line.split(" ");
      const sentence = []
      for (const word of words) {
        if (keywordCluster.includes(word.toLowerCase().replace(/[.,!?"]/g, ""))) {
          sentence.push(`📌${word}📌`);
        } else {
          sentence.push(word);
        }
      }
      text(sentence.join(" "), width, height + count * 20)
    } else {
      text(line, width, height + count * 20)
    }
    count += 1
  }
}

/**
 * Functionality for when mouse is pressed given current state of program.
 */
function mousePressed() {
  if (homeButtonHover) {
    pageStack = ['home'];
  } else if (backButtonHover) {
    pageStack.pop();
  } else if (timelineButtonHover) {
    currentPage = 'timeline'; pageStack.push('timeline');
    } else if (ageButtonHover) {
    for (let i = 0; i < 600; i++) { // randomize tree ring positions each time
        randomXs[i] = random(-50, 50);
        randomYs[i] = random(-50, 50);
    }
    currentPage = 'age'; pageStack.push('age');
    } else if (keywordButtonHover) {
    currentPage = 'keyword'; pageStack.push('keyword');
    } else if ((currentPage === 'home') && cardHover.index !== undefined) {
    randIndex = cardHover.index;
    randFront = round(random(0, 1));
    visitedCardIndices.push(cardHover.index);
    currentPage = 'card'; pageStack.push('card');
    } else if (currentPage === 'age' && ageHover) {
        randIndex = ageHoveredIndex;
        randFront = round(random(0, 1));
        currentPage = 'card'; pageStack.push('card');
    } else if (currentPage === 'timeline' && timelineHover) {
        randIndex = timelineIndex;
        randFront = round(random(0, 1));
        currentPage = 'card'; pageStack.push('card');
    } else if (currentPage === 'keyword') {
      if (clusterLabelHover) {
         clusterPress = true;
         clusterIndex = clusterHoverIndex;
      } else if (keywordHoverPos) {
        randIndex = keywordHoverIndex;
        randFront = 0;
        currentPage = 'cardWithKeywords'; pageStack.push('cardWithKeywords');
      }
    } else if (currentPage === 'card' || currentPage === 'cardWithKeywords') {
    if (cardToTimelineHover) {
      currentPage = 'timeline'; pageStack.push('timeline');
      cardExplore = true;
    } else if (cardToAgeHover) {
          for (let i = 0; i < 600; i++) { // randomize tree ring positions each time
        randomXs[i] = random(-50, 50);
        randomYs[i] = random(-50, 50);
      }
      currentPage = 'age'; pageStack.push('age');
      cardExplore = true;
    } else if (cardToKeywordHover) {
      currentPage = 'keyword'; pageStack.push('keyword');
      cardExplore = true;
    } else {
    flipCard = !flipCard;
    }
  }
  loop()
}

/**
 * Check if mouse if in `near` radius of given point.
 */
function mouseNear(x, y, near) {
  return abs(mouseX - x) < near && abs(mouseY - y) < near
}

/**
 * Check if mouse is within rectangle bounded by given information.
 */
function mouseIn(x, y, w, h) {
  return mouseX >= x && mouseX <= x + w && mouseY >= y && mouseY <= y + h; 
}